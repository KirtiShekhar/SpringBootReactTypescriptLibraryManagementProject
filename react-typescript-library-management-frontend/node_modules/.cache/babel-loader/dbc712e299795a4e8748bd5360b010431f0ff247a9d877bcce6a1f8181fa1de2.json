{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjects\\\\react-typescript-library-management\\\\src\\\\layouts\\\\ManageLibraryPage\\\\components\\\\AdminMessages.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Pagination } from \"../../Utils/Pagination\";\nimport { SpinnerLoading } from \"../../Utils/SpinnerLoading\";\nimport AdminMessageRequest from \"../../../models/adminMessagesRequest\";\nimport { AdminMessage } from \"./AdminMessage\";\nimport { AuthHeader } from \"../../../services/base.service\";\nimport { MESSAGE_BASE_URL } from \"../../../commons/constants\";\nimport authenticationService from \"../../../services/authentication.service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AdminMessages = () => {\n  _s();\n  // Auth\n  const currentSIgnInUser = authenticationService.getCurrentUser();\n\n  // Normal Loading Pieces\n  const [isLoadingMessages, setIsLoadingMessages] = useState(true);\n  const [httpError, setHttpError] = useState(null);\n\n  // Messages endpoint State\n  const [messages, setMessages] = useState([]);\n  const [messagesPerPage] = useState(5);\n\n  // Pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n\n  // Recall useEffect\n  const [btnSubmit, setBtnSubmit] = useState(false);\n  useEffect(() => {\n    const fetchUserMessages = async () => {\n      if (currentSIgnInUser && currentSIgnInUser.userId) {\n        const url = MESSAGE_BASE_URL + `/service/MessagesByClosed/pageWise?closed=false&&page=${currentPage - 1}&&size=${messagesPerPage}`;\n        const requestOptions = {\n          method: \"GET\",\n          headers: AuthHeader()\n        };\n        const messagesResponse = await fetch(url, requestOptions);\n        if (!messagesResponse.ok) {\n          throw new Error(\"Something went wrong!\");\n        }\n        const messagesResponseJson = await messagesResponse.json();\n        setMessages(messagesResponseJson._embedded.messages);\n        setTotalPages(messagesResponseJson.page.totalPages);\n      }\n      setIsLoadingMessages(false);\n    };\n    fetchUserMessages().catch(error => {\n      setIsLoadingMessages(false);\n      setHttpError(error.message);\n    });\n    window.scrollTo(0, 0);\n  }, [currentPage, currentSIgnInUser, messagesPerPage]);\n  if (isLoadingMessages) {\n    return /*#__PURE__*/_jsxDEV(SpinnerLoading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  }\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container m-5\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n  async function submitResponseToQuestion(id, response) {\n    const url = ``;\n    /*if (\r\n      authState &&\r\n      authState?.isAuthenticated &&\r\n      id !== null &&\r\n      response !== \"\"\r\n    )*/\n    {\n      const messageAdminRequestModel = new AdminMessageRequest(id, response);\n      const requestOptions = {\n        method: \"PUT\",\n        headers: {\n          Authorization: ``,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(messageAdminRequestModel)\n      };\n      const messageAdminRequestModelResponse = await fetch(url, requestOptions);\n      if (!messageAdminRequestModelResponse.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n      setBtnSubmit(!btnSubmit);\n    }\n  }\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-3\",\n    children: [messages.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Pending Q/A: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), messages.map(message => /*#__PURE__*/_jsxDEV(AdminMessage, {\n        message: message,\n        submitResponseToQuestion: submitResponseToQuestion\n      }, message.messagesId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"No pending Q/A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), totalPages > 1 && /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      totalPages: totalPages,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminMessages, \"+AOUuW3IforNZ+aFaJdu2jzziIU=\");\n_c = AdminMessages;\nvar _c;\n$RefreshReg$(_c, \"AdminMessages\");","map":{"version":3,"names":["useEffect","useState","Pagination","SpinnerLoading","AdminMessageRequest","AdminMessage","AuthHeader","MESSAGE_BASE_URL","authenticationService","AdminMessages","currentSIgnInUser","getCurrentUser","isLoadingMessages","setIsLoadingMessages","httpError","setHttpError","messages","setMessages","messagesPerPage","currentPage","setCurrentPage","totalPages","setTotalPages","btnSubmit","setBtnSubmit","fetchUserMessages","userId","url","requestOptions","method","headers","messagesResponse","fetch","ok","Error","messagesResponseJson","json","_embedded","page","catch","error","message","window","scrollTo","submitResponseToQuestion","id","response","messageAdminRequestModel","Authorization","body","JSON","stringify","messageAdminRequestModelResponse","paginate","pageNumber","length","map","messagesId"],"sources":["D:/ReactProjects/react-typescript-library-management/src/layouts/ManageLibraryPage/components/AdminMessages.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Pagination } from \"../../Utils/Pagination\";\r\nimport { SpinnerLoading } from \"../../Utils/SpinnerLoading\";\r\nimport Messages from \"../../../models/messagesEntity\";\r\nimport AdminMessageRequest from \"../../../models/adminMessagesRequest\";\r\nimport { AdminMessage } from \"./AdminMessage\";\r\nimport { AuthHeader } from \"../../../services/base.service\";\r\nimport { MESSAGE_BASE_URL } from \"../../../commons/constants\";\r\nimport authenticationService from \"../../../services/authentication.service\";\r\n\r\nexport const AdminMessages = () => {\r\n  // Auth\r\n  const currentSIgnInUser = authenticationService.getCurrentUser();\r\n\r\n  // Normal Loading Pieces\r\n  const [isLoadingMessages, setIsLoadingMessages] = useState(true);\r\n  const [httpError, setHttpError] = useState(null);\r\n\r\n  // Messages endpoint State\r\n  const [messages, setMessages] = useState<Messages[]>([]);\r\n  const [messagesPerPage] = useState(5);\r\n\r\n  // Pagination\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n\r\n  // Recall useEffect\r\n  const [btnSubmit, setBtnSubmit] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchUserMessages = async () => {\r\n      if (currentSIgnInUser && currentSIgnInUser.userId) {\r\n        const url =\r\n          MESSAGE_BASE_URL +\r\n          `/service/MessagesByClosed/pageWise?closed=false&&page=${\r\n            currentPage - 1\r\n          }&&size=${messagesPerPage}`;\r\n        const requestOptions = {\r\n          method: \"GET\",\r\n          headers: AuthHeader(),\r\n        };\r\n        const messagesResponse = await fetch(url, requestOptions);\r\n        if (!messagesResponse.ok) {\r\n          throw new Error(\"Something went wrong!\");\r\n        }\r\n        const messagesResponseJson = await messagesResponse.json();\r\n\r\n        setMessages(messagesResponseJson._embedded.messages);\r\n        setTotalPages(messagesResponseJson.page.totalPages);\r\n      }\r\n      setIsLoadingMessages(false);\r\n    };\r\n    fetchUserMessages().catch((error: any) => {\r\n      setIsLoadingMessages(false);\r\n      setHttpError(error.message);\r\n    });\r\n    window.scrollTo(0, 0);\r\n  }, [currentPage, currentSIgnInUser, messagesPerPage]);\r\n\r\n  if (isLoadingMessages) {\r\n    return <SpinnerLoading />;\r\n  }\r\n\r\n  if (httpError) {\r\n    return (\r\n      <div className=\"container m-5\">\r\n        <p>{httpError}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async function submitResponseToQuestion(id: number, response: string) {\r\n    const url = ``;\r\n    /*if (\r\n      authState &&\r\n      authState?.isAuthenticated &&\r\n      id !== null &&\r\n      response !== \"\"\r\n    )*/ {\r\n      const messageAdminRequestModel: AdminMessageRequest =\r\n        new AdminMessageRequest(id, response);\r\n      const requestOptions = {\r\n        method: \"PUT\",\r\n        headers: {\r\n          Authorization: ``,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(messageAdminRequestModel),\r\n      };\r\n\r\n      const messageAdminRequestModelResponse = await fetch(url, requestOptions);\r\n      if (!messageAdminRequestModelResponse.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      setBtnSubmit(!btnSubmit);\r\n    }\r\n  }\r\n\r\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <div className=\"mt-3\">\r\n      {messages.length > 0 ? (\r\n        <>\r\n          <h5>Pending Q/A: </h5>\r\n          {messages.map((message) => (\r\n            <AdminMessage\r\n              message={message}\r\n              key={message.messagesId}\r\n              submitResponseToQuestion={submitResponseToQuestion}\r\n            />\r\n          ))}\r\n        </>\r\n      ) : (\r\n        <h5>No pending Q/A</h5>\r\n      )}\r\n      {totalPages > 1 && (\r\n        <Pagination\r\n          currentPage={currentPage}\r\n          totalPages={totalPages}\r\n          paginate={paginate}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}